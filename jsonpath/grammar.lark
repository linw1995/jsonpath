start: path
    | funccall

COLON: ":"
slice: [expr] COLON [expr] COLON [expr] -> three_fields_slice
    | [expr] COLON [expr]              -> two_fields_slice

true: "true"
false: "false"
null: "null"
STRING: /`([^`\\]|\\.)*?`|'([^'\\]|\\.)*?'|"([^"\\]|\\.)*?"/i

value: NUMBER | true | false | null | STRING

STAR: "*"
DOT: "."
DOUBLE_DOT.2: ".."

identifier: CNAME | STRING
self: "@"
root: "$"
first_path: CNAME
    | self
    | root

LE: "<="
GE: ">="
LT: "<"
GT: ">"
NE: "!="
EQ: "="


COMPARE_OPERATOR: LE | GE | LT | GT | NE | EQ
?test_comparison: atom COMPARE_OPERATOR atom -> comparison_expr
    | atom

AND: "and"
OR: "or"

?test: test OR test_and                  -> or_expr
    | test_and
?test_and: test_and AND test_comparison  -> and_expr
    | test_comparison

predicate: "[" (expr | slice | STAR) "]"

action_separate_with_dot: DOUBLE_DOT predicate  -> search_with_predicate
    | DOUBLE_DOT identifier                     -> search_with_identifier
    | DOT identifier                            -> chain_with_identifier
    | DOT STAR                                  -> chain_with_star

path_with_action: atom action_separate_with_dot
    | atom predicate

?path: path_with_action
    | first_path

args: args "," expr       -> multi_args
    | expr                -> single_arg
funccall: CNAME "(" args ")"
    | CNAME "()"

?atom: value
    | path
    | funccall
    | "(" expr ")"          -> parenthesized_expr

?expr: test

%import common.SIGNED_INT    -> INT
%import common.SIGNED_NUMBER -> NUMBER
%import common.CNAME         -> CNAME
%import common.WS_INLINE

%ignore WS_INLINE
